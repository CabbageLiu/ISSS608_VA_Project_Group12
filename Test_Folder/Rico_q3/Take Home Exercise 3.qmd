---
title: "Take-Home Exercise 3"
author: "Enrico Sebastian"
date: "April 29 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# SHINY project: A Visual Analysis of Oceanus

![](images/fish.jpg)

In this part of the Take home Exercise, I will be impplementing the possible prototype that I will be using as part of our [group's SHINY project](https://isss608projectgroup12.netlify.app/).

## 1. Motivation of this project

The Oceanus knowledge graph reveals complex interactions among vessels, individuals, organizations, and locations in a region suspected of illegal activities, particularly around Nemo Reef. With numerous monitoring, communication, and suspicious activity records, this dataset presents an opportunity to uncover hidden patterns of behavior, influence networks, and potential illicit operations. The goal is to leverage interactive visual analytics to support investigative journalism, policy enforcement, and regulatory audits, especially regarding unauthorized vessel activities and environmental violations.

## 2. Data Preparation

### 2.1 Getting the required R packages

```{r}

pacman::p_load(tidyverse, jsonlite, 
               tidygraph, ggraph, SmartEDA, 
               ggrepel, scales, lubridate, dplyr, 
               visNetwork, viridis)

```

### 2.2 Reading the data

```{r}
MC3 <- fromJSON("data/MC3_graph.json")
MC3_schema <- fromJSON("data/MC3_schema.json")
```

```{r}
mc3_nodes <- as_tibble(MC3$nodes)
mc3_edges <- as_tibble(MC3$edges)

```

### 2.3 Data cleaning and wrangling

```{r}

mc3_nodes_cleaned <- mc3_nodes %>%
  mutate(id = as.character(id)) %>%
  filter(!is.na(id)) %>%
  distinct(id, .keep_all = TRUE) %>%
  select(-thing_collected)


# To rename source and target fields

mc3_edges_cleaned <- mc3_edges %>%
  rename(from_id = source, 
         to_id = target) %>%
  mutate(across(c(from_id, to_id), 
                as.character)) %>%
  filter(from_id %in% mc3_nodes_cleaned$id, 
         to_id %in% mc3_nodes_cleaned$id) %>%
  filter(!is.na(from_id), !is.na(to_id))


# To create mapping of fields

node_index_lookup <- mc3_nodes_cleaned %>%
  mutate(.row_id = row_number()) %>%
  select(id, .row_id)

# Concert from_id to to_id

mc3_edges_indexed <- mc3_edges_cleaned %>%
  left_join(node_index_lookup, 
            by = c("from_id" = "id")) %>%
  rename(from = .row_id) %>%
  left_join(node_index_lookup, 
            by = c("to_id" = "id")) %>%
  rename(to = .row_id) %>%
  select(from, to, is_inferred, type) %>%
  filter(!is.na(from) & !is.na(to)) 

# Subset nodes to those only used by edges

used_node_indices <- sort(
  unique(c(mc3_edges_indexed$from, 
           mc3_edges_indexed$to)))

mc3_nodes_final <- mc3_nodes_cleaned %>%
  slice(used_node_indices) %>%
  mutate(new_index = row_number())

# Rebuild from old index to old index

old_to_new_index <- tibble(
  old_index = used_node_indices,
  new_index = seq_along(
    used_node_indices))

# Update edge indices to node

mc3_edges_final <- mc3_edges_indexed %>%
  left_join(old_to_new_index, 
            by = c("from" = "old_index")) %>%
  rename(from_new = new_index) %>%
  left_join(old_to_new_index, 
            by = c("to" = "old_index")) %>%
  rename(to_new = new_index) %>%
  select(from = from_new, to = to_new, 
         is_inferred, type)
```

### 2.4 Answering question 3

#### 2.4.1 Cleaning the dataset

The code below is to help us to further clean the data first before we can start to answer question 3

```{r}
# Step 1: Define pseudonyms
pseudonym_keywords <- c("Boss", "The Lookout", "The Intern", "Mrs. Money", 
                        "The Accountant", "The Middleman", "Small Fry")

# Step 2: Filter pseudonym nodes (from mc3_nodes_final)
pseudonym_nodes <- mc3_nodes_final %>%
  filter(
    sub_type == "Person",
    str_detect(name, regex(paste(pseudonym_keywords, collapse = "|"), ignore_case = TRUE))
  )

# Step 3: Get all edge rows where from/to match pseudonym node indices
pseudonym_node_indices <- pseudonym_nodes$new_index

pseudonym_edges_final <- mc3_edges_final %>%
  filter(from %in% pseudonym_node_indices | to %in% pseudonym_node_indices)

# Step 4: Get only nodes that are involved in these edges
used_node_indices <- unique(c(pseudonym_edges_final$from, pseudonym_edges_final$to))

pseudonym_nodes_final <- mc3_nodes_final %>%
  filter(new_index %in% used_node_indices) %>%
  mutate(label_type = ifelse(new_index %in% pseudonym_node_indices, "Pseudonym", "Regular"))

# Step 5: Reindex nodes to match edge structure (0-based problem fix)
pseudonym_nodes_final <- pseudonym_nodes_final %>%
  mutate(temp_index = row_number())

# Mapping old new_index to new temp_index (for tbl_graph alignment)
index_map <- pseudonym_nodes_final %>%
  select(old = new_index, new = temp_index)

# Update edges to new 1-based index
pseudonym_edges_final <- pseudonym_edges_final %>%
  left_join(index_map, by = c("from" = "old")) %>%
  rename(from_new = new) %>%
  left_join(index_map, by = c("to" = "old")) %>%
  rename(to_new = new) %>%
  filter(!is.na(from_new), !is.na(to_new)) %>%
  select(from = from_new, to = to_new, type)

# Step 6: Build graph
pseudonym_graph <- tbl_graph(
  nodes = pseudonym_nodes_final,
  edges = pseudonym_edges_final,
  directed = TRUE
)
```

Before we start to answer the questions, let us first test out if the data cleaning is effective, which should be if not you wil not be able to see this!

::: panel-tabset
# Test code

```{r, eval=FALSE, fig.width=20, fig.height=15}
ggraph(pseudonym_graph, layout = "fr") +
  geom_edge_link(alpha = 0.3) +
  geom_node_point(aes(color = label_type), size = 4) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  labs(
    title = "Pseudonym Communication Network",
    subtitle = "Highlighting entities and their use of pseudonyms",
    color = "Entity Type"
  ) +
  theme_void()
```

# Test

```{r, echo=FALSE, fig.width=20, fig.height=15}
ggraph(pseudonym_graph, layout = "fr") +
  geom_edge_link(alpha = 0.3) +
  geom_node_point(aes(color = label_type), size = 4) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  labs(
    title = "Pseudonym Communication Network",
    subtitle = "Highlighting entities and their use of pseudonyms",
    color = "Entity Type"
  ) +
  theme_void()
```
:::

#### 2.4.2 Question 3a

The visualisations below shows the entities labelled based on their real names or pseudinyms which are labelled differently using color codes so as for easier visualisation.

::: panel-tabset
# Method 1

```{r}

# Count how many connections each pseudonym has
pseudonym_links <- pseudonym_edges_final %>%
  left_join(pseudonym_nodes_final, by = c("from" = "temp_index")) %>%
  rename(pseudonym = name) %>%
  filter(!is.na(pseudonym)) %>%   # âœ… Only valid pseudonym nodes
  group_by(pseudonym) %>%
  summarise(connection_count = n()) %>%
  arrange(desc(connection_count))


# Plot it
ggplot(pseudonym_links, aes(x = reorder(pseudonym, connection_count), y = connection_count)) +
  geom_col(fill = "tomato") +
  coord_flip() +
  labs(
    title = "Communication Frequency by Pseudonym",
    x = "Pseudonym Name",
    y = "Number of Connections"
  )

```

# Method 2

```{r}

# Prepare node dataframe
nodes_vis <- pseudonym_nodes_final %>%
  transmute(
    id = temp_index,
    label = name,
    group = ifelse(label_type == "Pseudonym", "Pseudonym", "Regular"),
    title = paste("Name:", name, "<br>Type:", label_type)
  )

# Prepare edge dataframe
edges_vis <- pseudonym_edges_final %>%
  transmute(
    from = from,
    to = to,
    label = type,
    arrows = "to"
  )

# Create visNetwork
visNetwork(nodes_vis, edges_vis, height = "600px", width = "100%") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visGroups(groupname = "Pseudonym", color = "tomato") %>%
  visGroups(groupname = "Regular", color = "steelblue") %>%
  visLegend(addNodes = list(
    list(label = "Pseudonym", shape = "dot", color = "tomato"),
    list(label = "Regular", shape = "dot", color = "steelblue")
  )) %>%
  visLayout(randomSeed = 42) %>%
  visPhysics(stabilization = TRUE)

```
:::

As we can see, there are 2 methods that we can use to visualise this case. The aim of this visualisation is to help clepper to visually identufy which nodes are pseudonuyms, and how are they connected to the real identity. Suspicious names or aliases will appear isolated

::: {.callout-note icon="question" title="What can we learn from the observations above?"}
-   From this visualisation, we can easily determine which names are Pseudonyms. These names can be easily identified via the color codes

-   We can easily trace who talks to and/or through aliases

-   This visualisation makes it easier for Clepper to spot suspicious names
:::

#### 2.4.3 Question 3b

::: panel-tabset
# Code

```{r, eval=FALSE, fig.width=20, fig.height=15}

# Q3b: Extract edges involving those pseudonyms
# Build pseudonym network using tidygraph
pseudonym_graph_tbl <- tbl_graph(
  nodes = pseudonym_nodes_final,
  edges = pseudonym_edges_final,
  directed = TRUE
) %>%
  mutate(degree_centrality = centrality_degree(mode = "all"))  # centrality values added to nodes

# Turn into tibble for ggplot
top_central <- pseudonym_graph_tbl %>%
  as_tibble() %>%
  filter(label_type == "Pseudonym") %>%
  arrange(desc(degree_centrality)) %>%
  slice_head(n = 10)

# Plot
ggplot(top_central, aes(x = reorder(name, degree_centrality), y = degree_centrality)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Top 10 Central Pseudonym Entities",
    x = "Pseudonym Name",
    y = "Degree Centrality"
  )


```

# Visualisation output

```{r, echo=FALSE, fig.width=20, fig.height=15}

# Q3b: Extract edges involving those pseudonyms
# Build pseudonym network using tidygraph
pseudonym_graph_tbl <- tbl_graph(
  nodes = pseudonym_nodes_final,
  edges = pseudonym_edges_final,
  directed = TRUE
) %>%
  mutate(degree_centrality = centrality_degree(mode = "all"))  # centrality values added to nodes

# Turn into tibble for ggplot
top_central <- pseudonym_graph_tbl %>%
  as_tibble() %>%
  filter(label_type == "Pseudonym") %>%
  arrange(desc(degree_centrality)) %>%
  slice_head(n = 10)

# Plot
ggplot(top_central, aes(x = reorder(name, degree_centrality), y = degree_centrality)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Top 10 Central Pseudonym Entities",
    x = "Pseudonym Name",
    y = "Degree Centrality"
  )


```
:::

The visualisation shows a bar chart of degree centrality that shows the tiop 10 most connectd pseudonyms. The aim of this graph is to heko clepper to quantify influence by measuring the cetrakity of the pseudonyms for deeper investigation. It also helps Clepper t identify who are the key players who may be controlling the flow of information

::: {.callout-note icon="question" title="What can we learn from the above visualisation?"}
-   These visualisation helps Clepper to identify wich of the pseudonyms are most active

-   We can see that the nodes act as central hubs wihin the pseudonym network

-   This visualisation can help clepper to prioritize pseudionyms first as part of his investigations
:::

#### 2.4.4 Question 3c

::: panel-tabset
# Code

```{r, eval=FALSE, fig.width=20, fig.height=15}

shared_pseudonyms <- pseudonym_nodes_final %>%
  group_by(name) %>%
  filter(n() > 1) %>%
  ungroup()

# Create nodes: both entities and pseudonyms
vis_nodes_3c <- shared_pseudonyms %>%
  transmute(id = id, 
            label = id, 
            group = "Entity",
            title = paste("Entity ID:", id)) %>%
  bind_rows(
    shared_pseudonyms %>%
      select(id = name) %>%
      distinct() %>%
      mutate(label = id,
             group = "Pseudonym",
             title = paste("Pseudonym:", id))
  )

vis_edges_3c <- shared_pseudonyms %>%
  transmute(from = id, to = name)

visNetwork(vis_nodes_3c, vis_edges_3c, height = "600px", width = "100%") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visGroups(groupname = "Entity", color = "steelblue") %>%
  visGroups(groupname = "Pseudonym", color = "tomato") %>%
  visLegend(addNodes = list(
    list(label = "Entity", shape = "dot", color = "steelblue"),
    list(label = "Pseudonym", shape = "dot", color = "tomato")
  )) %>%
  visLayout(randomSeed = 123)
```

# Visualisation Output

```{r, echo=FALSE, fig.width=20, fig.height=15}

shared_pseudonyms <- pseudonym_nodes_final %>%
  group_by(name) %>%
  filter(n() > 1) %>%
  ungroup()

# Create nodes: both entities and pseudonyms
vis_nodes_3c <- shared_pseudonyms %>%
  transmute(id = id, 
            label = id, 
            group = "Entity",
            title = paste("Entity ID:", id)) %>%
  bind_rows(
    shared_pseudonyms %>%
      select(id = name) %>%
      distinct() %>%
      mutate(label = id,
             group = "Pseudonym",
             title = paste("Pseudonym:", id))
  )

vis_edges_3c <- shared_pseudonyms %>%
  transmute(from = id, to = name)

visNetwork(vis_nodes_3c, vis_edges_3c, height = "600px", width = "100%") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visGroups(groupname = "Entity", color = "steelblue") %>%
  visGroups(groupname = "Pseudonym", color = "tomato") %>%
  visLegend(addNodes = list(
    list(label = "Entity", shape = "dot", color = "steelblue"),
    list(label = "Pseudonym", shape = "dot", color = "tomato")
  )) %>%
  visLayout(randomSeed = 123)

```
:::

The visualisation used for this part of the question is an interactive graph using the `visNetwork` entity which shows the edges and nodes. The blue nodes indicates the entities (may be people or vessels), red nodes which is the pseudonym names and edges which indicates which entity uses what pseudonym. The aim of this visualisation is to expose the reusing of an alias whereby the same pseudonym is tied and connected to multiple entities

::: {.callout-note icon="question" title="What can we learn from this visualisation?"}
-   This visualisation helps Clepper to easily identify which pseudonyms are reused by multiple entities

-   This breaks the assumed connection between identity and name revealing many one-to-one mapping

-   This therefore can help Clepper to detect deception strategies such as multiple people pretending to have one single alias, hence minimising the risks of impersonation.
:::
